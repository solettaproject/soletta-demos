#!/usr/bin/env sol-fbp-runner
# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This is the main flow used in the scoreboard.
# It receives information from table via OIC and update leds to display
# the score. It's composed by two 7 segments leds, so it multiplexes
# them using transistors. We keep changing it in a high frequency
# so both are quickly updated.

ScoreBoard(score-counter/server-score-counter)
Timer(timer:interval=300)
LedToggle(boolean/toggle)
InitialScore(constant/int:value=0)
InitialState(constant/boolean:value=false)

Score(ScoreLed)
ScoreSwitcher(switcher/int:keep_state=true)
RedWin(RedWinLed)
YellowWin(YellowWinLed)
RedTrans(RedTransistor)
YellowTrans(YellowTransistor)

InitialScore OUT -> IN[0] ScoreSwitcher
InitialScore OUT -> IN[1] ScoreSwitcher
InitialState OUT -> IN RedWin
InitialState OUT -> IN YellowWin

ScoreBoard OUT_P1_SCORE -> IN[0] ScoreSwitcher
ScoreBoard OUT_P2_SCORE -> IN[1] ScoreSwitcher
ScoreBoard OUT_P1_WIN -> IN RedWin
ScoreBoard OUT_P2_WIN -> IN YellowWin

ScoreSwitcher OUT[0] -> VALUE Score

Timer OUT -> IN LedToggle
LedToggle OUT -> IN RedTrans
LedToggle OUT -> IN _(boolean/not) OUT -> IN YellowTrans
LedToggle OUT -> IN _(converter/boolean-to-int) OUT -> IN_PORT ScoreSwitcher
